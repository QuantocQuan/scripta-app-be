import { Worker } from 'bullmq';
import fs from 'fs';
import { speechToText } from './services/stt.js';
import { imageToText } from './services/ocr.js';
import { youtubeToText } from './services/youtube.js';

const connection = { host: '127.0.0.1', port: 6379 };

const worker = new Worker('tasks', async job => {
  console.log(`‚ö° Nh·∫≠n job: id=${job.id}, name=${job.name}, data=`, job.data);

  let result = null;
  try {
    if (job.name === 'stt') {
      console.log('üëâ ƒêang x·ª≠ l√Ω STT...');
       const buffer = fs.readFileSync(job.data.filePath);
      result = await speechToText(buffer);
    } else if (job.name === 'ocr') {
      console.log('üëâ ƒêang x·ª≠ l√Ω OCR...');
             const buffer = fs.readFileSync(job.data.filePath);

      result = await imageToText(buffer);
    } else if (job.name === 'youtube') {
      console.log('üëâ ƒêang x·ª≠ l√Ω YouTube...');
      result = await youtubeToText(job.data.url);
    }

    fs.writeFileSync(`./results/${job.id}.json`, JSON.stringify({ result }, null, 2));
    console.log(`‚úÖ K·∫øt qu·∫£ ƒë√£ l∆∞u v√†o ./results/${job.id}.json`);
    return result;
  } catch (err) {
    console.error(`‚ùå L·ªói khi x·ª≠ l√Ω job ${job.id}:`, err);
    throw err;
  }
}, { connection });

// Khi job ho√†n th√†nh
worker.on('completed', job => console.log(`üéâ Job ${job.id} completed`));

// Khi job th·∫•t b·∫°i
worker.on('failed', (job, err) => console.log(`üí• Job ${job.id} failed: ${err.message}`));

// Th√™m log khi Worker s·∫µn s√†ng v√† k·∫øt n·ªëi Redis th√†nh c√¥ng
worker.on('ready', () => console.log('‚úÖ Worker ƒë√£ k·∫øt n·ªëi Redis th√†nh c√¥ng v√† s·∫µn s√†ng nh·∫≠n job'));

// Th√™m log khi Worker m·∫•t k·∫øt n·ªëi Redis
worker.on('error', (err) => console.error('‚ùå Worker g·∫∑p l·ªói k·∫øt n·ªëi Redis:', err));
